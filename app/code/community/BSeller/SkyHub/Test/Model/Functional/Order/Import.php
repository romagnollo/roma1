<?php

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */
class BSeller_SkyHub_Test_Model_Functional_Order_Import extends BSeller_SkyHub_Test_AbstractTest
{
    public function setUp()
    {
        parent::setUp();
    }

    /**
     * @loadFixture config
     * @loadFixture product
     */
    public function testCreateOrder()
    {
        //creating orders API mock class;
        $orderIntegratorMock = $this->getModelMock(
            'bseller_skyhub/integrator_sales_order',
            ['orders']
        );

        //changing the behavior of the "orders" method to return the mocked json data;
        $jsonOrder = $this->getOrderStub();
        $orderIntegratorMock->method('orders')->will($this->returnValue($jsonOrder));

        //injecting the mock object as return of the singleton call;
        $this->replaceByMock('singleton', 'bseller_skyhub/integrator_sales_order', $orderIntegratorMock);

        //geting a real object to work with;
        $orderCronModel = Mage::getModel('bseller_skyhub/cron_queue_sales_order');

        $schedule = new Mage_Cron_Model_Schedule();
        $store = Mage::getModel('core/store')->load(1);

        //setting some store to work;
        Mage::app()->setCurrentStore($store);

        //executing the method to create the order;
        $orderCronModel->executeIntegration($schedule, $store);

        //getting the ID of the created order;
        $orderCreatedId = Mage::helper('bseller_skyhub')
            ->getStringBetween($schedule->getMessages(), 'Order ID ', ' was successfully created in store Default Store View.');

        //### asserting if the order was created;
        $validationResult = null;
        if (is_numeric($orderCreatedId) && $orderCreatedId > 0) {
            $validationResult = 1;
        }
        $this->assertInternalType('int', $validationResult);
        $order = Mage::getModel('sales/order')->loadByIncrementId($orderCreatedId);

        //### asserting if the skyhub code was set correctly;
        $this->assertNotNull($order->getBsellerSkyhubCode());

        //### asserting if the totals match with the json totals;
        $jsonOrder = array_shift($jsonOrder);
        $discount = $jsonOrder['discount'];
        $items = $jsonOrder['items'];
        $shippingCost = 0;
        $totalItemsValue = 0;
        foreach ($items as $item) {
            $shippingCost += $item['shipping_cost'];
            $totalItemsValue += (((isset($item['special_price']) && $item['special_price']) ? $item['special_price'] : $item['original_price']) * $item['qty']);
        }
        $this->assertEquals($order->getGrandTotal(), $totalItemsValue + $shippingCost - $discount);

        //### validating order addresses
        $this->assertTrue($this->_validateAddress($order->getBillingAddress()));
        $this->assertTrue($this->_validateAddress($order->getShippingAddress()));
    }

    public function tearDown()
    {
        //clean orders created for tests;
        $this->cleanEntityTable('sales/order');
        $this->cleanEntityTable('customer/customer');

        parent::tearDown();
    }

    private function _validateAddress($address)
    {
        if (!$address->getCustomerId()) {
            return false;
        }
        if (empty($address->getStreet())) {
            return false;
        }
        if (!$address->getPostcode()) {
            return false;
        }
        if (!$address->getRegion()) {
            return false;
        }
        if (!$address->getCountryId()) {
            return false;
        }
        if (!$address->getCity()) {
            return false;
        }
        if (!$address->getTelephone()) {
            return false;
        }
        return true;
    }

    public function getOrderStub()
    {
        $orderCode = (int)rand(11111, 99999);

        return json_decode('[
{
    "updated_at": "2018-11-14T10:56:33-02:00",
    "total_ordered": 82.07,
    "tags": [

    ],
    "sync_status": "NOT_SYNCED",
    "status": {
        "type": "APPROVED",
        "label": "Aprovado (SkyHub)",
        "code": "payment_received"
    },
    "shipping_method": "Courier",
    "shipping_cost": 8.19,
    "shipping_carrier": "Courier",
    "shipping_address": {
        "street": "Rua Prudente de Morais",
        "secondary_phone": null,
        "region": "SP",
        "reference": null,
        "postcode": "13400310",
        "phone": "19 34244190",
        "number": "146",
        "neighborhood": "Centro",
        "full_name": "CARLOS ARMANDO MOLINARI JUNIOR",
        "detail": "",
        "country": "BR",
        "complement": null,
        "city": "Piracicaba"
    },
    "shipped_date": "",
    "shipments": [

    ],
    "placed_at": "2018-11-14T10:46:35-02:00",
    "payments": [
        {
            "value": 82.07,
            "transaction_date": "2018-11-14T10:56:00-02:00",
            "status": null,
            "parcels": 2,
            "method": "CREDIT_CARD",
            "description": "No valor de: 82.07",
            "card_issuer": "01425787000104",
            "autorization_id": "034529"
        }
    ],
    "items": [
        {
            "special_price": 33.88,
            "shipping_cost": 7.19,
            "qty": 1,
            "product_id": "teste-produto-1",
            "original_price": 33.88,
            "name": "Teste Produto 1",
            "id": "teste-produto-1"
        },
        {
            "shipping_cost": 1.00,
            "qty": 2,
            "product_id": "teste-produto-2",
            "original_price": 25.00,
            "name": "Teste Produto 2",
            "id": "teste-produto-2"
        }
    ],
    "invoices": [

    ],
    "interest": 0,
    "import_info": {
        "ss_name": "Lojas Americanas",
        "remote_id": "02-680478752",
        "remote_code": "268047875202"
    },
    "estimated_delivery_shift": null,
    "estimated_delivery": "2018-11-28T00:00:00-02:00",
    "discount": 10,
    "customer": {
        "vat_number": "11437068898",
        "phones": [
            "19 34244190"
        ],
        "name": "CARLOS ARMANDO MOLINARI JUNIOR",
        "gender": "",
        "email": "11437068898@email.com.br",
        "date_of_birth": "1965-05-10"
    },
    "code": "' . $orderCode . '",
    "channel": "Lojas Americanas",
    "calculation_type": "b2wentregadirect",
    "billing_address": {
        "street": "Rua Professor Jos\u00e9 Agostinho Forti",
        "secondary_phone": null,
        "region": "SP",
        "reference": null,
        "postcode": "13420836",
        "phone": "19 34244190",
        "number": "278",
        "neighborhood": "Dois C\u00f3rregos",
        "full_name": "CARLOS ARMANDO MOLINARI JUNIOR",
        "detail": "",
        "country": "BR",
        "complement": null,
        "city": "Piracicaba"
    },
    "approved_date": "2018-11-14T12:59:25.126000"
}]
            ', true);
    }
}
