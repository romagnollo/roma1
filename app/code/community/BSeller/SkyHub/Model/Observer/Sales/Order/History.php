<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

class BSeller_SkyHub_Model_Observer_Sales_Order_History extends BSeller_SkyHub_Model_Observer_Sales_Abstract
{
    /**
     * @param Varien_Event_Observer $observer
     */
    public function sendTaxInvoiceKey(Varien_Event_Observer $observer)
    {
        if ($this->isRunningQueueProcess()) {
            return;
        }

        /** @var Mage_Sales_Model_Order_Status_History $history */
        $history = $observer->getData('status_history');

        if (!$history || !$history->getId()) {
            return;
        }

        $comment = trim($history->getComment());
        if (empty($comment)) {
            return;
        }

        /** @var Mage_Sales_Model_Order $order */
        $order = $history->getOrder();

        if (!$order || !$order->getId()) {
            return;
        }

        if ($order->getData('bseller_skyhub_invoice_key')) {
            return;
        }

        $invoiceKeyNumber = $this->extractInvoiceKeyNumber($comment);

        if (empty($invoiceKeyNumber)) {
            return;
        }

        try {
            $params = array(
                $order->getId(),
                $invoiceKeyNumber
            );
    
            /** @var boolean $result */
            $result = $this->getStoreIterator()
                           ->call($this->orderIntegrator(), 'invoice', $params, $order->getStore());

            if (!$result) {
                return;
            }
        } catch (Exception $e) {
            Mage::logException($e);
        }

        $order->setData('invoice_key', $invoiceKeyNumber)
            ->setData('bseller_skyhub_invoice_key', $invoiceKeyNumber);

        $order->getResource()->save($order);
    }

    /**
     * @param Varien_Event_Observer $observer
     */
    public function processOrderShippingException(Varien_Event_Observer $observer)
    {
        if ($this->isRunningQueueProcess()) {
            return;
        }

        /** @var Mage_Sales_Model_Order_Status_History $history */
        $history = $observer->getData('status_history');
    
        if (!$history || !$history->getId()) {
            return;
        }
        
        $configStatus = $this->getShipmentExceptionOrderStatus();

        /**
         * There was no change.
         */
        if ($history->getStatus() == $history->getOrigData('status')) {
            return;
        }

        if (!$this->statusMatches($configStatus, $history->getStatus())) {
            return;
        }
    
        $datetime = $this->getDateModel()->gmtDate('c');
        $comment  = $history->getComment();
        
        if (!$comment) {
            $comment = $this->__('A problem has occurred with the order shipment.');
        }

        try {
            $params = array(
                $history->getParentId(),
                $datetime,
                $comment
            );
            
            /** @var Mage_Core_Model_Store $store */
            $store = $history->getStore();
            
            $this->getStoreIterator()->call($this->orderIntegrator(), 'shipmentException', $params, $store);
        } catch (Exception $e) {
            Mage::logException($e);
        }
    }

    /**
     * @param $comment
     *
     * @return null|string
     */
    protected function extractInvoiceKeyNumber($comment)
    {
        $keyPattern = $this->getTaxInvoiceKeyPattern();

        if (!$this->validateKeyPattern($keyPattern)) {
            return null;
        }

        $number = null;

        preg_match('/.*?([0-9]{44}).*?/', $comment, $matches);

        if (!empty($matches) && isset($matches[1])) {
            $number = $matches[1];
        }

        return (string) $number;
    }

    /**
     * @param $pattern
     *
     * @return bool
     */
    protected function validateKeyPattern($pattern = null)
    {
        if (empty($pattern)) {
            return false;
        }

        return (bool) (strpos($pattern, '%d') != false);
    }

    /**
     * @return bool
     */
    protected function isRunningQueueProcess()
    {
        return BSeller_SkyHub_Model_Cron_Queue_Sales_Order_Queue::isRunning();
    }
}
