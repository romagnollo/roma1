<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

class BSeller_SkyHub_Model_Resource_Queue extends BSeller_Core_Model_Resource_Abstract
{

    protected function _construct()
    {
        $this->_init('bseller_skyhub/queue', 'id');
    }


    /**
     * @param int|array   $entityIds
     * @param string      $entityType
     * @param int         $processType
     * @param bool        $canProcess
     * @param null|string $processAfter
     * @param int         $storeId
     *
     * @return $this
     */
    public function queue(
        $entityIds,
        $entityType,
        $processType = BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT,
        $canProcess = true,
        $processAfter = null,
        $storeId = 0
    )
    {
        $entityIds = $this->filterEntityIds((array) $entityIds);

        if (empty($entityIds)) {
            return $this;
        }

        $items = array();
        
        $deleteSets = array_chunk($entityIds, 1000);
        
        foreach ($deleteSets as $deleteIds) {
            $this->beginTransaction();
            
            try {
                $where = $this->getCondition($deleteIds, $entityType, $storeId);
                $this->_getWriteAdapter()->delete($this->getMainTable(), $where);
        
                $this->commit();
            } catch (Exception $e) {
                Mage::logException($e);
                $this->rollBack();
            }
        }

        foreach ($entityIds as $entityId) {
            $items[] = array(
                'entity_id'     => (int) $entityId,
                'entity_type'   => (string) $entityType,
                'status'        => BSeller_SkyHub_Model_Queue::STATUS_PENDING,
                'process_type'  => (int) $processType,
                'can_process'   => (bool) $canProcess,
                'process_after' => empty($processAfter) ? now() : $processAfter,
                'store_id'      => (int) Mage::app()->getStore($storeId)->getId(),
                'created_at'    => now(),
            );
        }

        /** @var array $item */
        foreach ($items as $item) {
            $this->beginTransaction();

            try {
                $this->_getWriteAdapter()->insert($this->getMainTable(), $item);
                $this->commit();
            } catch (Exception $e) {
                Mage::logException($e);
                $this->rollBack();
            }
        }

        return $this;
    }


    /**
     * @param string   $entityType
     * @param int      $processType
     * @param int|null $limit
     * @param int      $storeId
     *
     * @return array
     */
    public function getPendingEntityIds(
        $entityType,
        $processType = BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT,
        $limit = null,
        $storeId = 0
    )
    {
        $integrableStatuses = array(
            BSeller_SkyHub_Model_Queue::STATUS_PENDING,
            BSeller_SkyHub_Model_Queue::STATUS_RETRY
        );

        /** @var Varien_Db_Select $select */
        $select = $this->getReadConnection()
            ->select()
            ->from($this->getMainTable(), 'entity_id')
            ->where('status IN (?)', $integrableStatuses)
            ->where('can_process = ?', 1)
            ->where('process_type = ?', (int) $processType)
            ->where('store_id IN (?)', $this->getStoreIds($storeId))
            ->where('process_after <= ?', now())
            ->where('entity_type = ?', (string) $entityType)
        ;

        if (!is_null($limit)) {
            $select->limit((int) $limit);
        }

        $ids = $this->getReadConnection()->fetchCol($select);

        return (array) $ids;
    }


    /**
     * @param integer|array $entityIds
     * @param string        $entityType
     * @param integer       $storeId
     *
     * @return $this
     */
    public function removeFromQueue($entityIds, $entityType, $storeId = 0)
    {
        $entityIds = $this->filterEntityIds((array) $entityIds);

        if (empty($entityIds)) {
            return $this;
        }

        $where = $this->getCondition($entityIds, $entityType, $storeId);
        $this->_getWriteAdapter()->delete($this->getMainTable(), $where);

        return $this;
    }
    
    
    /**
     * @param int|array $queueIds
     *
     * @return $this
     */
    public function deleteByQueueIds($queueIds)
    {
        $queueIds = (array) $this->filterEntityIds($queueIds);
    
        if (empty($queueIds)) {
            return $this;
        }
    
        $queueIds = implode(',', $queueIds);
        $where    = new Zend_Db_Expr("id IN ({$queueIds})");
        
        $this->_getWriteAdapter()->delete($this->getMainTable(), $where);
    
        return $this;
    }


    /**
     * @param integer|array $entityIds
     * @param string        $entityType
     * @param string|null   $message
     * @param integer       $storeId
     *
     * @return $this
     */
    public function setFailedEntityIds($entityIds, $entityType, $message = null, $storeId = 0)
    {
        $this->updateQueueStatus(
            $entityIds, $entityType, BSeller_SkyHub_Model_Queue::STATUS_FAIL, $message, $storeId
        );
        return $this;
    }


    /**
     * @param integer|array $entityIds
     * @param string        $entityType
     * @param string|null   $message
     * @param integer       $storeId
     *
     * @return $this
     */
    public function setPendingEntityIds($entityIds, $entityType, $message = null, $storeId = 0)
    {
        $this->updateQueueStatus(
            $entityIds, $entityType, BSeller_SkyHub_Model_Queue::STATUS_PENDING, $message, $storeId
        );
        return $this;
    }


    /**
     * @param integer|array $entityIds
     * @param string        $entityType
     * @param string|null   $message
     * @param integer       $storeId
     *
     * @return $this
     */
    public function setRetryEntityIds($entityIds, $entityType, $message = null, $storeId = 0)
    {
        $this->updateQueueStatus(
            $entityIds, $entityType, BSeller_SkyHub_Model_Queue::STATUS_RETRY, $message, $storeId
        );
        return $this;
    }


    /**
     * @param int|array   $entityIds
     * @param string      $entityType
     * @param int         $status
     * @param string|null $message
     * @param integer     $storeId
     *
     * @return $this
     */
    public function updateQueueStatus($entityIds, $entityType, $status, $message = null, $storeId = 0)
    {
        $this->updateQueues(
            $entityIds,
            $entityType,
            array(
                'status'   => $status,
                'messages' => $message,
            ),
            $storeId
        );
        return $this;
    }


    /**
     * @param integer|array $entityIds
     * @param string        $entityType
     * @param array         $binds
     * @param integer       $storeId
     *
     * @return $this
     */
    public function updateQueues($entityIds, $entityType, array $binds = array(), $storeId = 0)
    {
        $entityIds = $this->filterEntityIds((array) $entityIds);

        if (empty($entityIds)) {
            return $this;
        }

        $where = $this->getCondition($entityIds, $entityType, $storeId);

        $this->_getWriteAdapter()
            ->update($this->getMainTable(), $binds, $where);

        return $this;
    }


    /**
     * @param array $entityIds
     *
     * @return array
     */
    protected function filterEntityIds(array $entityIds)
    {
        $entityIds = (array) array_filter($entityIds, function (&$value) {
            $value = (int) $value;
            return $value;
        });

        return $entityIds;
    }


    /**
     * @param array  $entityIds
     * @param string $entityType
     * @param int    $storeId
     *
     * @return Zend_Db_Expr
     */
    protected function getCondition(array $entityIds, $entityType, $storeId = 0)
    {
        $entityIds  = implode(',', $entityIds);
        $storeIds   = implode(',', $this->getStoreIds($storeId));
        $conditions = array(
            "entity_id IN ({$entityIds})",
            "entity_type = '{$entityType}'",
            "store_id IN ({$storeIds})"
        );

        return new Zend_Db_Expr(implode(' AND ', $conditions));
    }


    /**
     * @param int $storeId
     *
     * @return array
     */
    protected function getStoreIds($storeId = 0)
    {
        $storeId = (int) Mage::app()->getStore($storeId)->getId();

        $storeIds = array(0, $storeId);
        $storeIds = array_unique($storeIds);

        return $storeIds;
    }
}
