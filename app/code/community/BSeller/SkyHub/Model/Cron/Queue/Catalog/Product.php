<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

class BSeller_SkyHub_Model_Cron_Queue_Catalog_Product extends BSeller_SkyHub_Model_Cron_Queue_Abstract
{
    use BSeller_Core_Trait_Config,
        BSeller_SkyHub_Model_Integrator_Catalog_Product_Validation;

    /**
     * @param Mage_Cron_Model_Schedule $schedule
     */
    public function create(Mage_Cron_Model_Schedule $schedule)
    {
        $this->processStoreIteration($this, 'createIntegration', $schedule);
    }

    public function createIntegration(Mage_Cron_Model_Schedule $schedule, Mage_Core_Model_Store $store)
    {
        if (!$this->canRun($schedule)) {
            return;
        }

        $eavConfigModel = Mage::getSingleton('eav/config');
        $ignoreMarketplaceAttr = $eavConfigModel->getAttribute('catalog_product', 'ignore_marketplace');

        $queuedIds = (array) $this->getQueueResource()->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
        );

        $queuedIds          = $this->filterIds($queuedIds);
        $resource = Mage::getSingleton('core/resource');
        $skyhubEntityTable  = $resource->getTableName('bseller_skyhub/entity_id');
        $catalogIntAttrTable = $resource->getTableName('catalog_product_entity_int');

        /** @var array $productVisibilities */
        $productVisibilities = $this->getSkyHubModuleConfigAsArray('integration_product_visibility', 'general', $store);

        /** @var Mage_Catalog_Model_Resource_Product_Collection $collection */
        $collection = $this->getProductCollection()
            ->addAttributeToFilter('visibility', array('in' => $productVisibilities));

        if (!empty($queuedIds)) {
            $collection->addFieldToFilter('entity_id', array('nin' => $queuedIds));
        }

        /** @var Varien_Db_Select $select */
        $select = $collection->getSelect()
            ->joinLeft(
                array('bseller_skyhub_entity' => $skyhubEntityTable),
                'bseller_skyhub_entity.entity_id = e.entity_id 
                      AND bseller_skyhub_entity.entity_type = \'' . BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT . '\''
            )
            /** filter by ignore_marketplace flag */
            ->joinLeft(
                array("cpee_marketplace" => $catalogIntAttrTable),
                "cpee_marketplace.entity_id = e.entity_id AND cpee_marketplace.attribute_id = {$ignoreMarketplaceAttr->getId()}"
            )
            ->reset('columns')
            ->columns('e.entity_id')
            ->where('bseller_skyhub_entity.updated_at IS NULL OR bseller_skyhub_entity.integrate = 1')
            ->where('(cpee_marketplace.value is null or cpee_marketplace.value = 0)')
            ->order(array('e.updated_at DESC', 'e.created_at DESC'));

        //adding a website filter
        $collection->addWebsiteFilter($store->getWebsiteId());
        //end

        /** Set limitation. */
        $limit = abs($this->getCronConfig()->catalogProduct()->getQueueCreateLimit());

        if ($limit) {
            $select->limit((int)$limit);
        }

        $productIds = (array)$this->getQueueResource()->getReadConnection()->fetchCol($select);

        $productIdsTmp = [];

        foreach ($productIds as $productId) {
            if ($this->canIntegrateProduct(Mage::getModel('catalog/product')->load($productId))) {
                $productIdsTmp[] = $productId;
            }
        }

        $productIds = $productIdsTmp;

        if (empty($productIds)) {
            $schedule->setMessages($this->__('No products to be queued this time.'));
            return;
        }

        $this->getQueueResource()
            ->queue(
                $productIds,
                BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT,
                BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
            );

        $schedule->setMessages(
            $this->__('%s product(s) were queued. IDs: %s.', count($productIds), implode(',', $productIds))
        );
    }


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     *
     * @return mixed|void
     */
    public function execute(Mage_Cron_Model_Schedule $schedule)
    {
        $this->processStoreIteration($this, 'executeIntegration', $schedule);

        $successQueueIds = $this->extractResultSuccessIds($schedule);
        $failedQueueIds  = $this->extractResultFailIds($schedule);

        if (!empty($successQueueIds)) {
            $this->getQueueResource()->removeFromQueue(
                $successQueueIds,
                BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT
            );
        }

        $schedule->setMessages($this->__(
            'Queue was processed. Success: %s. Errors: %s.',
            implode(',', $successQueueIds),
            implode(',', $failedQueueIds)
        ));
    }


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     */
    public function executeIntegration(Mage_Cron_Model_Schedule $schedule, Mage_Core_Model_Store $store)
    {
        if (!$this->canRun($schedule)) {
            return;
        }

        $productIds = (array) $this->getQueueResource()->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
        );

        $productIds = $this->filterIds($productIds);

        /** @var Mage_Catalog_Model_Resource_Product_Collection $collection */
        $collection = $this->getProductCollection()
            ->addStoreFilter($store)
            ->addFieldToFilter('entity_id', array('in' => $productIds));

        /** Set limitation. */
        $limit = abs($this->getCronConfig()->catalogProduct()->getQueueExecuteLimit());

        if ($limit) {
            $collection->getSelect()->limit((int) $limit);
        }

        if (!$collection->getSize()) {
            $schedule->setMessages($this->__('No product to be integrated this time.'));
            return;
        }

        $successQueueIds = array();
        $failedQueueIds  = array();

        /** @var Mage_Catalog_Model_Product $product */
        foreach ($collection as $product) {
            /** @var \SkyHub\Api\Handler\Response\HandlerInterface $response */
            $response = $this->catalogProductIntegrator()->createOrUpdate($product, $store);

            /*
             * If the response is exactly equal to false, means it cannot be integrated because of internal validation;
             */
            if ($response === false) {
                $this->getQueueResource()->removeFromQueue(
                    array($product->getId()),
                    BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT
                );
                continue;
            }

            if ($this->isErrorResponse($response)) {
                $failedQueueIds[] = $product->getId();

                /** @var \SkyHub\Api\Handler\Response\HandlerException $response */
                $this->getQueueResource()->setFailedEntityIds(
                    $product->getId(),
                    BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT,
                    $response->message()
                );

                continue;
            }

            $successQueueIds[] = $product->getId();
        }

        $this->mergeResults($schedule, $successQueueIds, $failedQueueIds);
    }


    /**
     * @return BSeller_SkyHub_Model_Resource_Catalog_Product_Collection
     */
    protected function getProductCollection()
    {
        /** @var BSeller_SkyHub_Model_Resource_Catalog_Product_Collection $collection */
        $collection = Mage::getResourceModel('bseller_skyhub/catalog_product_collection');
        return $collection;
    }


    /**
     * @param array $ids
     *
     * @return array
     */
    protected function filterIds(array $ids)
    {
        $ids = array_filter($ids, function (&$value) {
            $value = (int) $value;
            return $value;
        });

        return (array) $ids;
    }


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     * @param int|null                 $storeId
     *
     * @return bool
     */
    protected function canRun(Mage_Cron_Model_Schedule $schedule, $storeId = null)
    {
        if (!$this->getCronConfig()->catalogProduct()->isEnabled($storeId)) {
            $schedule->setMessages($this->__('Catalog Product Cron is Disabled'));
            return false;
        }

        /**
         * If the notification block can be shown, it means there's a products attributes mapping problem.
         */
        if ($this->hasPendingAttributesToMap()) {
            $schedule->setMessages(
                $this->__('The installation is not completed. All required product attributes must be mapped.')
            );

            return false;
        }

        return parent::canRun($schedule, $storeId);
    }
}
