<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

class BSeller_SkyHub_Model_Cron_Queue_Clean extends BSeller_SkyHub_Model_Cron_Abstract
{
    use BSeller_SkyHub_Trait_Attribute_Notification;

    /**
     * @param Mage_Cron_Model_Schedule $schedule
     *
     * @return void
     */
    public function cleanDeletedEntities(Mage_Cron_Model_Schedule $schedule)
    {
        if (!$this->canRun($schedule)) {
            return;
        }

        $queueResource = $this->getQueueResource();

        //check if has excluded PRODUCT items on queue
        $productIds = (array)$queueResource->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
        );

        $productsToBeRemovedFromQueue = array();
        foreach ($productIds as $productId) {
            $product = Mage::getModel('catalog/product')->load($productId);
            if (!$product || !$product->getId()) {
                $productsToBeRemovedFromQueue[] = $productId;
            }
        }
        $queueResource->removeFromQueue($productsToBeRemovedFromQueue, BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT);
        //END

        //check if has excluded CATEGORY items on queue
        $categoryIds = (array)$queueResource->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_CATALOG_CATEGORY,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
        );

        $categoriesToBeRemovedFromQueue = array();
        foreach ($categoryIds as $categoryId) {
            $category = Mage::getModel('catalog/category')->load($categoryId);
            if (!$category || !$category->getId()) {
                $categoriesToBeRemovedFromQueue[] = $categoryId;
            }
        }
        $queueResource->removeFromQueue($categoriesToBeRemovedFromQueue, BSeller_SkyHub_Model_Entity::TYPE_CATALOG_CATEGORY);
        //END

        //check if has excluded ATTRIBUTE items on queue
        $attributeIds = (array)$queueResource->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT_ATTRIBUTE,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_EXPORT
        );

        $attributesToBeRemovedFromQueue = array();
        foreach ($attributeIds as $attributeId) {
            $attribute = Mage::getModel('catalog/entity_attribute')->load($attributeId);
            if (!$attribute || !$attribute->getId()) {
                $attributesToBeRemovedFromQueue[] = $attributeId;
            }
        }
        $queueResource->removeFromQueue($attributesToBeRemovedFromQueue, BSeller_SkyHub_Model_Entity::TYPE_CATALOG_PRODUCT_ATTRIBUTE);
        //END
    }

    /**
     * @param Mage_Cron_Model_Schedule $schedule
     *
     * @return bool
     */
    protected function canRun(Mage_Cron_Model_Schedule $schedule)
    {
        if (!$this->getCronConfig()->queueClean()->isEnabled()) {
            $schedule->setMessages($this->__('Cleaning Cron is Disabled'));
            return false;
        }

        //if the notification block can be showed, it means there's a products attributes mapping problem;
        if ($this->hasPendingAttributesToMap()) {
            $schedule->setMessages($this->__('The installation is not completed. All required product attributes must be mapped.'));
            return false;
        }

        return parent::canRun($schedule);
    }
}
