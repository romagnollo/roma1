<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */
 
class BSeller_SkyHub_Model_Cron_Queue_Sales_Order_Status extends BSeller_SkyHub_Model_Cron_Queue_Sales_Abstract
{

    use BSeller_SkyHub_Trait_Sales_Order;


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     */
    public function create(Mage_Cron_Model_Schedule $schedule)
    {
        if (!$this->canRun($schedule)) {
            return;
        }

        $deniedStates = array(
            Mage_Sales_Model_Order::STATE_CANCELED,
            Mage_Sales_Model_Order::STATE_CLOSED,
            Mage_Sales_Model_Order::STATE_COMPLETE,
        );

        /** @var Mage_Sales_Model_Resource_Order_Collection $collection */
        $collection = $this->getOrderCollection()
            ->addFieldToFilter('state', array('nin' => $deniedStates))
            ->addFieldToFilter('bseller_skyhub', 1);

        /** @var Varien_Db_Select $select */
        $select = $collection->getSelect()
            ->reset('columns')
            ->columns('entity_id');

        $limit = $this->getCronConfig()->salesOrderStatus()->queueCreateLimit();
        
        if ($limit) {
            $select->limit((int) $limit);
        }
        
        $orderIds = (array) $this->getQueueResource()
            ->getReadConnection()
            ->fetchCol($select);

        if (empty($orderIds)) {
            $schedule->setMessages($this->__('No order to queue.'));
            return;
        }

        $this->getQueueResource()->queue(
            $orderIds,
            BSeller_SkyHub_Model_Entity::TYPE_SALES_ORDER_STATUS,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_IMPORT
        );

        $schedule->setMessages($this->__('Order IDs Queued: %s.', implode(',', $orderIds)));
    }

    public function execute(Mage_Cron_Model_Schedule $schedule)
    {
        $this->processStoreIteration($this, 'executeIntegration', $schedule);
    }

    /**
     * @param Mage_Cron_Model_Schedule $schedule
     */
    public function executeIntegration(Mage_Cron_Model_Schedule $schedule)
    {
        $limit = $this->getCronConfig()->salesOrderStatus()->queueExecuteLimit();
        
        $orderIds = (array) $this->getQueueResource()->getPendingEntityIds(
            BSeller_SkyHub_Model_Entity::TYPE_SALES_ORDER_STATUS,
            BSeller_SkyHub_Model_Queue::PROCESS_TYPE_IMPORT,
            (int) $limit
        );

        if (empty($orderIds)) {
            $schedule->setMessages($this->__('No order in the queue to be processed.'));
            return;
        }

        /** @var Mage_Sales_Model_Resource_Order_Collection $collection */
        $collection = $this->getOrderCollection()
            ->addFieldToFilter('entity_id', array('in' => $orderIds));

        /** @var Mage_Sales_Model_Order $order */
        foreach ($collection as $order) {
            if (!$this->canRun($schedule, $order->getStoreId())) {
                return;
            }
            
            /** @var array $orderData */
            $orderData = (array) $this->orderIntegrator()->orderByOrderId($order->getId());

            $statusCode = $this->arrayExtract($orderData, 'status/code');
            $statusType = $this->arrayExtract($orderData, 'status/type');
            // $statusLabel = $this->arrayExtract($orderData, 'status/label');

            try {
                $result = $this->salesOrderStatusProcessor()
                    ->processOrderStatus($statusCode, $statusType, $order, $orderData);
            } catch (Exception $ex) {
                Mage::logException($ex);

                //set queue register to error
                $this->getQueueResource()->setFailedEntityIds(
                    $order->getId(),
                    BSeller_SkyHub_Model_Entity::TYPE_SALES_ORDER_STATUS,
                    $ex->getMessage()
                );
                //end
                continue;
            }

            if (($order->hasInvoices() && $order->hasShipments()) || $this->isOrderExpirated($order)) {
                $this->getQueueResource()->removeFromQueue(
                    $order->getId(),
                    BSeller_SkyHub_Model_Entity::TYPE_SALES_ORDER_STATUS
                );
            }
        }
    }

    protected function isOrderExpirated($order)
    {
        $expirationDays = $limit = $this->getCronConfig()->salesOrderStatus()->orderExpirationDays();

        $referenceDate = new DateTime();
        $referenceDate = $referenceDate->modify('-' . $expirationDays . ' days');
        if (new DateTime($order->getCreatedAt()) < $referenceDate) {
            return true;
        }
        return false;
    }


    /**
     * @return Mage_Sales_Model_Resource_Order_Collection
     */
    protected function getOrderCollection()
    {
        /** @var Mage_Sales_Model_Resource_Order_Collection $collection */
        $collection = Mage::getResourceModel('sales/order_collection');
        return $collection;
    }

    
    /**
     * @param Mage_Cron_Model_Schedule $schedule
     * @param int|null                 $storeId
     *
     * @return bool
     */
    protected function canRun(Mage_Cron_Model_Schedule $schedule, $storeId = null)
    {
        if (!$this->getCronConfig()->salesOrderStatus()->isEnabled($storeId)) {
            $schedule->setMessages($this->__('Sales Order Status Cron is Disabled'));
            return false;
        }
        
        return parent::canRun($schedule, $storeId);
    }
}
