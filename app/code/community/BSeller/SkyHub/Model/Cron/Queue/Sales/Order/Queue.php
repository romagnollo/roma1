<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.skyhub.com.br/hc/pt-br/requests/new for questions and other requests.
 */

class BSeller_SkyHub_Model_Cron_Queue_Sales_Order_Queue extends BSeller_SkyHub_Model_Cron_Queue_Sales_Abstract
{
    const QUEUE_PROCESS = 'sales_order_queue_process';

    use BSeller_Core_Trait_Data;

    /**
     * @return bool
     */
    public static function isRunning()
    {
        return Mage::registry(self::QUEUE_PROCESS) === true;
    }

    /**
     * @param Mage_Cron_Model_Schedule $schedule
     *
     * @throws Mage_Core_Exception
     * @return mixed|void
     */
    public function execute(Mage_Cron_Model_Schedule $schedule)
    {
        $this->processStoreIteration($this, 'executeIntegration', $schedule);
    }

    /**
     * Import next orders from the queue in SkyHub.
     *
     * @param Mage_Cron_Model_Schedule $schedule
     * @param Mage_Core_Model_Store $store
     *
     * @throws Mage_Core_Exception
     * @throws BSeller_SkyHub_Exceptions_UnprocessableException
     */
    public function executeIntegration(Mage_Cron_Model_Schedule $schedule, Mage_Core_Model_Store $store)
    {
        if (!$this->canRun($schedule, $store->getId())) {
            return;
        }

        Mage::register(self::QUEUE_PROCESS, true, true);

        $limit = $this->getCronConfig()->salesOrderQueue()->getLimit();
        $count = 0;

        while ($count < $limit) {
            $message = $schedule->getMessages();
            $orderData = $this->orderQueueIntegrator()->nextOrder();

            if (empty($orderData)) {
                $schedule->setMessages(empty($message) ? $this->__('No order found in the queue.') : $message);
                break;
            }

            $skyhubCode = $this->arrayExtract($orderData, 'code');

            try {
                $order = $this->salesOrderProcessor()->createOrder($orderData);
            } catch (BSeller_SkyHub_Exceptions_UnprocessableException $e) {
                $isDeleted = $this->orderQueueIntegrator()->delete($skyhubCode);

                $message .= $e->getMessage();
                if ($isDeleted) {
                    $message .= ' ' . $this->__('It was also removed from queue.');
                }

                $schedule->setMessages($message);
                continue;
            }

            if (!$order || !$order->getId()) {
                $message = $schedule->getMessages();
                $message .= $this->__('Order cannot be created.', $skyhubCode);
                $schedule->setMessages($message);
                continue;
            }

            $message .= $this->__(
                'Order %s successfully created in store %s.', $order->getIncrementId(), $store->getName()
            );

            $isDeleted = $this->orderQueueIntegrator()->deleteByOrder($order);

            if ($isDeleted) {
                $message .= ' ' . $this->__('It was also removed from queue.');
            }

            $schedule->setMessages($message);
            $count++;
        }

        Mage::unregister(self::QUEUE_PROCESS);
    }


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     * @param int|null $storeId
     *
     * @return bool
     */
    protected function canRun(Mage_Cron_Model_Schedule $schedule, $storeId = null)
    {
        if (!$this->getCronConfig()->salesOrderQueue()->isEnabled($storeId)) {
            $schedule->setMessages($this->__('Sales Order Queue Cron is Disabled'));
            return false;
        }

        return parent::canRun($schedule, $storeId);
    }
}
