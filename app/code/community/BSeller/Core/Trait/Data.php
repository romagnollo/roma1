<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_Core
 *
 * @copyright Copyright (c) 2016 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    BSeller Core Team <dev@e-smart.com.br>
 */

trait BSeller_Core_Trait_Data
{

    /**
     * @param string|null $helperAlias
     *
     * @return Mage_Core_Helper_Abstract
     */
    protected function _h($helperAlias = null)
    {
        return $this->_helper($helperAlias);
    }


    /**
     * @param string|null $helperAlias
     *
     * @return Mage_Core_Helper_Abstract
     */
    protected function _helper($helperAlias = null)
    {
        if (empty($helperAlias)) {
            $classGroup = $this->getClassGroupName();
            return Mage::helper($classGroup);
        }

        if (false === strpos($helperAlias, '/')) {
            return $this->_helper($this->getClassGroupName() . '/' . $helperAlias);
        }

        return Mage::helper($helperAlias);
    }


    /**
     * Logs messages in a certain file.
     *
     * @param mixed  $message
     * @param string $file
     * @param int    $type
     * @param int    $forceLog
     *
     * @return $this
     */
    public function log($message, $file = null, $type = Zend_Log::DEBUG, $forceLog = true)
    {
        if ($message instanceof Exception) {
            $message = $message->getMessage();
        }

        if (empty($file)) {
            $file = 'BSeller_Core.log';
        }

        Mage::log($message, $type, $file, $forceLog);

        return $this;
    }


    /**
     * Sends redirect for another route.
     *
     * @param string    $url
     * @param bool|null $secure
     */
    public function responseRedirect($url, $secure = null)
    {
        if (!is_bool($secure)) {
            $secure = $this->getRequest()->isSecure();
        }

        $this->getResponse()
            ->setRedirect(Mage::getUrl($url, array('_secure' => $secure)))
            ->sendResponse();

//        @todo removed due magento marketplace validation
//        die();
    }


    /**
     * @return Mage_Core_Controller_Request_Http
     */
    public function getRequest()
    {
        return Mage::app()->getRequest();
    }


    /**
     * @return Zend_Controller_Response_Http
     */
    public function getResponse()
    {
        return Mage::app()->getResponse();
    }


    /**
     * Retrieve the class group of the self object.
     *
     * @return string
     */
    protected function getClassGroupName()
    {
        $classGroup = strtolower($this->getClassGroup());

        if ('mage' === substr($classGroup, 0, 4)) {
            $classGroup = substr($classGroup, 5, strlen($classGroup) - 5);
        }

        return $classGroup;
    }


    /**
     * Retrieve helper module name
     *
     * @return string
     */
    protected function getClassGroup()
    {
        $className  = get_class($this);
        $classGroup = substr($className, 0, strpos($className, '_', strpos($className, '_') + 1));

        if (!class_exists($classGroup . '_Helper_Data')) {
            $classGroup = 'BSeller_Core';
        }

        return $classGroup;
    }


    /**
     * Translate
     *
     * @return string
     */
    public function __()
    {
        $args = func_get_args();
        $expr = new Mage_Core_Model_Translate_Expr(array_shift($args), $this->getClassGroup());
        array_unshift($args, $expr);

        return Mage::app()->getTranslator()->translate($args);
    }


    /**
     * @param string $value
     * @param string $char
     * @param float  $density
     *
     * @return string
     */
    protected function protectString($value, $char = '*', $density = 0.5)
    {
        $len            = strlen($value);
        $protectionSize = (int) ($len * (float) $density);

        $sidesAmount    = max((int) (($len-$protectionSize)/2), 0);

        $left   = substr($value, 0, $sidesAmount);
        $right  = substr($value, -$sidesAmount, $sidesAmount);
        $middle = str_repeat($char, $protectionSize);

        $value = implode(array($left, $middle, $right));

        return $value;
    }
    
    
    /**
     * @param array                   $data
     * @param string                  $index
     * @param mixed|array|bool|string $default
     * @param bool                    $shiftOriginal
     *
     * @return mixed|array|bool|string
     */
    protected function arrayExtract(array $data, $index, $default = false, $shiftOriginal = false)
    {
        if (strpos($index, '/') !== false) {
            $parts = explode('/', $index);

            foreach ($parts as $index) {
                $data = $this->arrayExtract($data, $index);

                if (!is_array($data)) {
                    if (empty($data)) {
                        return $default;
                    }
    
                    if (true === $shiftOriginal) {
                        $this->arrayUnset($data, $index);
                    }

                    return $data;
                }
            }
        }

        if (!$this->arrayIndexExists($data, $index)) {
            return $default;
        }
        
        $value = $data[$index];
        
        if (true === $shiftOriginal) {
            $this->arrayUnset($data, $index);
        }

        return $value;
    }
    
    
    /**
     * @param array            $data
     * @param array|string|int $indexes
     *
     * @return mixed
     */
    protected function arrayUnset(array &$data, $indexes)
    {
        $indexes = (array) $indexes;
        
        foreach ($indexes as $index) {
            unset($data[$index]);
        }
        
        return $data;
    }
    
    
    /**
     * @param array                   $data
     * @param string                  $index
     * @param mixed|array|bool|string $default
     *
     * @return mixed|array|bool|string
     */
    protected function arrayExtractNoEmpty(array $data, $index, $default = false)
    {
        if (!$this->arrayIsNotEmpty($data, $index)) {
            return $default;
        }
        
        return $data[$index];
    }
    
    
    /**
     * @param array  $data
     * @param string $index
     *
     * @return bool
     */
    protected function arrayIsNotEmpty(array $data, $index)
    {
        return (bool) ($this->arrayIndexExists($data, $index) && $data[$index]);
    }
    
    
    /**
     * @param array  $data
     * @param string $index
     *
     * @return bool
     */
    protected function arrayIndexExists(array $data, $index)
    {
        return (bool) isset($data[$index]);
    }

}
